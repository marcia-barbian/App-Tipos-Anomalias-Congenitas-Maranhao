library(shiny); runApp('app_novo.R')
library(shiny); runApp('app_novo.R')
runApp('app_novo.R')
runApp('app_novo.R')
runApp('app_novo.R')
runApp('app_novo.R')
library(shiny)
library(rgdal)
library(DT)
library('dygraphs')
library('xts')
library(leaflet)
library(tidyverse)
library(xts)
library(plotly)
#####################################
#PACOTES SHINY NAU
library(readxl)
library(RColorBrewer)
library(dplyr)
library(reshape2)
library(shinydashboard)
library(ggrepel)
library(sf)
library(RColorBrewer)
library(ps)
library(rgdal)
library(spdep) #pacote espacial Moran Lisa
#library(gtsummary)  # fazer tabelas no R
library(kableExtra)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyEffects)
############################################
options(OutDec= ",") #Muda de ponto para virgula nos decimais!
#setwd("C:/Users/mhbar/Google Drive/consultoria_luzivan/recomeco_aplicativos/app_analise_anomalias_congenitas_maranhao")
################tentando transformar o banco de dados
mapa_ma_shp <- sf::st_read("21MUE250GC_SIR.shp", quiet = TRUE)
dplyr::glimpse(mapa_ma_shp)
mapa_ma_shp <- mapa_ma_shp %>%
mutate(municipio = str_to_lower(NM_MUNICIP)) # todas as cidades com letra minuscula
############################################################################################################
############################### leituras dados luzivan
banco_luzivan <- read_excel("marcia_modificado.xlsx")
banco_luzivan = banco_luzivan %>%   #separa o cÃ³digo do nome da cidade
separate("Município", into = c("Codigo", "Cidade"), sep = 7)
banco <- banco_luzivan %>%
mutate(municipio = str_to_lower(Cidade)) # transforma as cidades em letra miniscula
banco$municipio = factor(banco$municipio)
banco_completo <- merge(banco, mapa_ma_shp, by.x = "municipio", by.y = "municipio") # une os dois bancos dado as cidades
dplyr::glimpse(banco_completo) # transforma em objeto espacial, n?o sei qual das duas funcoes usar
banco_completo = st_as_sf(banco_completo)
banco_tabela=banco_luzivan
names(banco_tabela) = c("Codigo", "Municipio","Espinha bifida (Q05)",  "Outras malformacoes congenitas (Q80-Q89)",
"Aparelho circulatorio (Q20-Q28)", "Fenda labial e palatina (Q35-Q37)",
"Ausencia atresia e estenose do intestino delgado (Q41)", "Aparelho digestivo (Q38-Q45)",
"Testiculo nao descido (Q53)", "Aparelho urinario (Q60-Q64)",
"Deformidades congenitas do quadril (Q65)",
"Deformidades congenitas dos pes (Q66)", "Aparelho osteomuscular (Q65-Q79)",
"Sistema nervoso (Q00-Q07)", "Anomalias cromossomicas (Q90-Q99)",
"Hemangioma e linfangioma de qualquer localizacao (D18)", "Sem anomalia",
"k")
banco_tabela2 = banco_tabela %>%
gather(key = "tipo de anomalia", value = "n", 3:17) %>%
mutate(prevalencia = (n/k)*10000)
names(banco_tabela2) = c("Codigo", "Municipio", "numero de nascidos vivos",
"tipo de anomalia", "numero de nascidos vivos com a anomalia",
"prevalencia")
View(banco_tabela)
names(banco_tabela2) = c("Codigo", "Municipio", "numero de nascidos vivos",
"tipo de anomalia", "numero de nascidos vivos com a anomalia",
"prevalencia")
View(banco_tabela2)
banco_luzivan_novo_tabela$`tipo de anomalia`
banco_luzivan_novo_tabela$"tipo de anomalia"
runApp('app_novo_mudando_variaveis.R')
runApp('app_novo_mudando_variaveis.R')
banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 6) %>%
#mutate(prevalencia = `prevalencia de anomalias congenitas`) %>%
#arrange(prevalencia) %>%
#top_n(20, prevalencia)
aux <- banco_luzivan_novo_tabela %>%
select(ano, `prevalencia de anomalias congenitas`) %>%
group_by(ano) %>%
summarise(media = mean(`prevalencia de anomalias congenitas`))%>%
arrange(ano)
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 6) %>%
#mutate(prevalencia = `prevalencia de anomalias congenitas`) %>%
#arrange(prevalencia) %>%
#top_n(20, prevalencia)
aux <- banco_luzivan_novo_tabela %>%
select(ano, `prevalencia de anomalias congenitas`) %>%
group_by(ano) %>%
summarise(media = mean(`prevalencia de anomalias congenitas`))%>%
arrange(ano)
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 6)
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 6) %>%
group_by(Municipio) %>%
summarise(media = mean(prevalencia))%>%
arrange(ano)
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 6) %>%
group_by(`tipo de anomalia`) %>%
summarise(media = mean(prevalencia))%>%
arrange(media)
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 4, 6) %>%
group_by(`tipo de anomalia`) %>%
summarise(media = mean(prevalencia))%>%
arrange(media)
head(aux)
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 4, 6)
aux
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 4, 6) %>%
group_by(`tipo de anomalia`) %>%
summarise(media = mean(prevalencia))
aux
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 4, 6)
head(aux)
mean(aux$prevalencia)
which(is.na(aux$prevalencia))
aux[218,]
aux[219,]
aux["220",]
aux[3480,]
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 4, 6) %>%
drop_na()
which(is.na(aux))
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 4, 6) %>%
drop_na()
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 4, 6) %>%
drop_na() %>%
group_by(`tipo de anomalia`) %>%
summarise(media = mean(prevalencia))%>%
arrange(media)
aux=data.frame(aux)
names(aux)
plotar = ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), color = "purple" )
plotar
plotar = ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), color = "purple" ) +
theme(axis.text.x = element_text(angle=45,size=9, vjust = 0.5))
plotar
plotar = ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), color = "purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.5))
plotar
plotar = ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.5))
plotar
aux = banco_tabela2 %>%
filter(`tipo de anomalia` != "sem anomalia") %>%
select(2, 4, 6) %>%
drop_na() %>%
group_by(`tipo de anomalia`) %>%
summarise(media = mean(prevalencia))%>%
arrange(media)
plotar = ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.5))
plotar
# #ordem <- as.character(aux$ano)
# aux$ano = as.character(aux$ano)
aux=data.frame(aux)
plotar = ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.5))
plotar
aux = banco_tabela2 %>%
filter(`tipo de anomalia` != "sem anomalia") %>%
select(2, 4, 6) %>%
drop_na() %>%
group_by(`tipo de anomalia`) %>%
summarise(media = mean(prevalencia))%>%
arrange(media)
head(aux)
aux
aux = banco_tabela2 %>%
filter(`tipo de anomalia` != "Sem anomalia") %>%
select(2, 4, 6) %>%
drop_na() %>%
group_by(`tipo de anomalia`) %>%
summarise(media = mean(prevalencia))%>%
arrange(media)
# #ordem <- as.character(aux$ano)
# aux$ano = as.character(aux$ano)
aux=data.frame(aux)
plotar = ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.5))
plotar
plotar = ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=80,size=9, vjust = 0.5))
plotar
plotar =
ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=80,size=9, vjust = 0.1))
plotar =
ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=80,size=9, vjust = 0.1))
plotar =
ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=80,size=9, vjust = 0.00001))
plotar =
ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.00001))
plotar =
ggplot(aux) +
geom_col(aes(x = tipo.de.anomalia,y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.0001))
plotar
plotar =
ggplot(aux) +
geom_col(aes(x = reorder(tipo.de.anomalia, -media),y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.0001))
plotar
ggplot(aux) +
geom_col(aes(x = reorder(tipo.de.anomalia, -media),y = media), fill = "purple", col="purple" ) +
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.0001))
labs(x = "Tipo de anomalia", y = "Média Prevalência") +
ylim(0, max(aux$media)+5)
ggplotly(plotar)
plotar = ggplot(aux) +
geom_col(aes(x = reorder(tipo.de.anomalia, -media),y = media), fill = "purple", col="purple" ) +
ylim(0, max(aux$media)+10)+
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.0001))+
labs(x = "Tipo de anomalia", y = "Média Prevalência")
ggplotly(plotar)
plotar = ggplot(aux) +
geom_col(aes(x = reorder(tipo.de.anomalia, -media),y = media), fill = "purple", col="purple" ) +
ylim(0, max(aux$media)+3)+
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.0001))+
labs(x = "Tipo de anomalia", y = "Média Prevalência")
ggplotly(plotar)
plotar = ggplot(aux) +
geom_col(aes(x = reorder(tipo.de.anomalia, -media),y = media), fill = "purple", col="purple" ) +
ylim(0, max(aux$media)+1)+
theme(axis.text.x = element_text(angle=90,size=9, vjust = 0.0001))+
labs(x = "Tipo de anomalia", y = "Média Prevalência")
ggplotly(plotar)
banco_tabela2 %>%
filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 6) %>%
#mutate(prevalencia = `prevalencia de anomalias congenitas`) %>%
arrange(prevalencia) %>%
top_n(20, prevalencia)
runApp('pedaco1_mapa_prevalencia.R')
aux <- banco_tabela2 %>%
filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(5) %>%
aux = as.numeric(aux[[1]])
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
runApp('pedaco1_mapa_prevalencia.R')
library(shiny)
library(rgdal)
library(DT)
library('dygraphs')
library('xts')
library(leaflet)
library(tidyverse)
library(xts)
library(plotly)
#####################################
#PACOTES SHINY NAU
library(readxl)
library(RColorBrewer)
library(dplyr)
library(reshape2)
library(shinydashboard)
library(ggrepel)
library(sf)
library(RColorBrewer)
library(ps)
library(rgdal)
library(spdep) #pacote espacial Moran Lisa
#library(gtsummary)  # fazer tabelas no R
library(kableExtra)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyEffects)
############################################
options(OutDec= ",") #Muda de ponto para virgula nos decimais!
#setwd("C:/Users/mhbar/Google Drive/consultoria_luzivan/recomeco_aplicativos/app_analise_anomalias_congenitas_maranhao")
################tentando transformar o banco de dados
mapa_ma_shp <- sf::st_read("21MUE250GC_SIR.shp", quiet = TRUE)
dplyr::glimpse(mapa_ma_shp)
mapa_ma_shp <- mapa_ma_shp %>%
mutate(municipio = str_to_lower(NM_MUNICIP)) # todas as cidades com letra minuscula
############################################################################################################
############################### leituras dados luzivan
banco_luzivan <- read_excel("marcia_modificado.xlsx")
banco_luzivan = banco_luzivan %>%   #separa o cÃ³digo do nome da cidade
separate("Município", into = c("Codigo", "Cidade"), sep = 7)
banco <- banco_luzivan %>%
mutate(municipio = str_to_lower(Cidade)) # transforma as cidades em letra miniscula
banco$municipio = factor(banco$municipio)
banco_completo <- merge(banco, mapa_ma_shp, by.x = "municipio", by.y = "municipio") # une os dois bancos dado as cidades
dplyr::glimpse(banco_completo) # transforma em objeto espacial, n?o sei qual das duas funcoes usar
banco_completo = st_as_sf(banco_completo)
banco_tabela=banco_luzivan
names(banco_tabela) = c("Codigo", "Municipio","Espinha bifida (Q05)",  "Outras malformacoes congenitas (Q80-Q89)",
"Aparelho circulatorio (Q20-Q28)", "Fenda labial e palatina (Q35-Q37)",
"Ausencia atresia e estenose do intestino delgado (Q41)", "Aparelho digestivo (Q38-Q45)",
"Testiculo nao descido (Q53)", "Aparelho urinario (Q60-Q64)",
"Deformidades congenitas do quadril (Q65)",
"Deformidades congenitas dos pes (Q66)", "Aparelho osteomuscular (Q65-Q79)",
"Sistema nervoso (Q00-Q07)", "Anomalias cromossomicas (Q90-Q99)",
"Hemangioma e linfangioma de qualquer localizacao (D18)", "Sem anomalia",
"k")
banco_tabela2 = banco_tabela %>%
gather(key = "tipo de anomalia", value = "n", 3:17) %>%
mutate(prevalencia = (n/k)*10000)
names(banco_tabela2) = c("Codigo", "Municipio", "numero de nascidos vivos",
"tipo de anomalia", "numero de nascidos vivos com a anomalia",
"prevalencia")
###############################################################################################################
#############################transforma em um arquivo que o leaflet consegue ler!!!!
###########################################################
banco_completo_trasformado <- st_transform(banco_completo, "+init=epsg:4326")
###################################  precisa resolver as anomalias que tem poucos casos e dirtorcem o grafico
aux = banco_tabela2 %>%
filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
select(2, 6) %>%
drop_na()%>%
#mutate(prevalencia = `prevalencia de anomalias congenitas`) %>%
arrange(prevalencia) %>%
#top_n(20, prevalencia) %>%
slice(1:20)
View(banco_tabela2)
###################################  precisa resolver as anomalias que tem poucos casos e dirtorcem o grafico
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
filter(`tipo de anomalia` == "Testiculo nao descido (Q53)") %>%
select(2, 6) %>%
drop_na()%>%
#mutate(prevalencia = `prevalencia de anomalias congenitas`) %>%
arrange(prevalencia) %>%
#top_n(20, prevalencia) %>%
slice(1:20)
aux
###################################  precisa resolver as anomalias que tem poucos casos e dirtorcem o grafico
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
filter(`tipo de anomalia` == "Testiculo nao descido (Q53)") %>%
select(2, 6) %>%
drop_na()%>%
#mutate(prevalencia = `prevalencia de anomalias congenitas`) %>%
arrange(prevalencia)
aux = banco_tabela2 %>%
#filter(`tipo de anomalia` == input$tipo_anomalia_graficos_proporcao) %>%
filter(`tipo de anomalia` == "Testiculo nao descido (Q53)") %>%
select(2, 6) %>%
drop_na()%>%
#mutate(prevalencia = `prevalencia de anomalias congenitas`) %>%
arrange(prevalencia) %>%
top_n(20, prevalencia)
aux
View(banco_tabela2)
shiny::runApp('C:/Users/mhbar/Google Drive/consultoria_luzivan/aplicativo_NOVO_com_LISA/AppAnomaliasCongenitasMaranhao1_8_10_19')
shiny::runApp('C:/Users/mhbar/Google Drive/consultoria_luzivan/aplicativo_NOVO_com_LISA/AppAnomaliasCongenitasMaranhao1_8_10_19')
shiny::runApp()
runApp('app_novo.R')
runApp('app_tipo_anomalia_6_6_versao1.R')
shiny::runApp()
runApp('app_tipo_anomalia_6_6_versao1.R')
runApp('app_tipo_anomalia_6_6_versao1.R')
runApp('app_novo.R')
runApp('app_novo.R')
runApp()
runApp('D:/GOOGLE_DRIVE3/consultoria_luzivan/git_app_maranhao1/App-Anomalias-Congenitas-Maranhao')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp('D:/GOOGLE_DRIVE3/consultoria_luzivan/git_app_maranhao1/App-Anomalias-Congenitas-Maranhao')
shiny::runApp()
install.packages("rgdal", dependencies = TRUE, repos='https://cran.rstudio.com/')
install.packages("rgdal", dependencies = TRUE, repos = "https://cran.rstudio.com/")
install.packages("rgdal", dependencies = TRUE, repos = "https://cran.rstudio.com/")
install.packages("rgdal", dependencies = TRUE, repos = "https://cran.rstudio.com/")
shiny::runApp()
